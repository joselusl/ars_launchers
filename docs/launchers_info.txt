# source
source $WORKSPACE/install/setup.bash

# compile
colcon build

# clean
rm -rf build/ install/ log/


# rqt tools
rqt
rqt_graph
rqt_plot




## SIMULATED EXPERIMENTS

# Simulator robot (if simulated experiment)
# DJI M100 Flying
roslaunch ars_launchers robot_simulator.launch robot_sim_description_yaml_file:="$(rospack find ars_config)/config/sim_robot/config_sim_robot_dji_m100.yaml" robot_init_status_flying:="True"
# DJI M100 Landed
roslaunch ars_launchers robot_simulator.launch robot_sim_description_yaml_file:="$(rospack find ars_config)/config/sim_robot/config_sim_robot_dji_m100.yaml" robot_init_status_flying:="False"
# DJI Tello Flying
roslaunch ars_launchers robot_simulator.launch robot_sim_description_yaml_file:="$(rospack find ars_config)/config/sim_robot/config_sim_robot_dji_tello.yaml" robot_init_status_flying:="True"
# DJI Tello Landed
roslaunch ars_launchers robot_simulator.launch robot_sim_description_yaml_file:="$(rospack find ars_config)/config/sim_robot/config_sim_robot_dji_tello.yaml" robot_init_status_flying:="False"


# Simulator environment (if simulated experiment)
roslaunch ars_launchers environment_simulator.launch
# Env empty
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_empty.yaml"
# Env 00 - Default
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_00.yaml"
# Env 01
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_01.yaml"
# Env 02
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_02.yaml"
# Env 03
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_03.yaml"
# Env 04
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_04.yaml"
# Aerolab Env 01
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_aerolab_01.yaml"
# Aerolab Env 02
roslaunch ars_launchers environment_simulator.launch environment_description_yaml_file:="$(rospack find ars_config)/config/sim_environment/obstacles_env_aerolab_02.yaml"




## REAL EXPERIMENTS

# Config for real experiments in every terminal (if real experiment) -> TODO Check master IP
# Option 1 -> preferred
source $ARS_PROJECT/setup.bash 192.168.30.129
# Option 2
# Master IP
export ROS_MASTER_URI=http://192.168.30.129:11311
export ROS_IP=192.168.30.129
# Own IP (check on your virtual machine)
export ROS_HOSTNAME=192.168.30.XX


# Optitrack node -> In External computer (if real experiment)
roslaunch ars_launchers optitrack_node.launch server:=192.168.30.105


# DJI Tello driver (if real experiment)
roslaunch ars_launchers dji_tello_driver_ros.launch connect_to_tello_wifi_auto:=False



# Optitrack transformation (if real experiment)

# Obstacles static
roslaunch ars_launchers optitrack_transf_environment_static.launch optitrack_transf_environment_description_yaml_file:="$(rospack find ars_config)/config/optitrack_transf/optitrack_transf_environment.yaml" obstacles_label:="static"

# Obstacles dynamic
roslaunch ars_launchers optitrack_transf_environment_dynamic.launch optitrack_transf_environment_description_yaml_file:="$(rospack find ars_config)/config/optitrack_transf/optitrack_transf_environment.yaml" obstacles_label:="dynamic"

# Aerial Robot
roslaunch ars_launchers optitrack_transf_robot.launch meas_robot_frame:="optitrack_robot_base_link" meas_world_frame:="world"








## SIMULATORS NEEDED FOR EXPERIMENTS (BOTH SIMULATED AND REAL)

# Simulator collision detection (optional)
roslaunch ars_launchers collision_detection_simulator.launch


# Sim obstacle detector
# Long range -> DJI M100
roslaunch ars_launchers obstacles_detector_simulator.launch sim_obstacles_detector_params_yaml_file:="$(rospack find ars_config)/config/sim_obstacles_detector/config_sim_obstacles_detector_long_range.yaml"
# Short range -> DJI Tello
roslaunch ars_launchers obstacles_detector_simulator.launch sim_obstacles_detector_params_yaml_file:="$(rospack find ars_config)/config/sim_obstacles_detector/config_sim_obstacles_detector_short_range.yaml"


# Simulator robot sensors
roslaunch ars_launchers robot_simulator_sensors_robot.launch






## VISUALIZATION

# rviz for visualization
# config by default
rviz
# with ars config
rosrun rviz rviz -d $(rospack find ars_config)/config/rviz_config/rviz_conf_sim.rviz


# Robot urdf model for visualization (optional)
# DJI M100
roslaunch ars_launchers robot_urdf_dji_m100.launch
# DJI Tello
roslaunch ars_launchers robot_urdf_dji_tello.launch


# Trajectory record for visualization (optional)
roslaunch ars_launchers robot_trajectory.launch






## SIMULATOR ROBOT INTELLIGENCE COMPONENTS

# Environment mapper simulator (only if not SLAM)
roslaunch ars_launchers mapper_simulator.launch






## ROBOT INTELLIGENCE - COMPONENTS

# Remote controller
# To drone
roslaunch ars_launchers robot_remote_controller.launch robot_cmd_stamped:=/robot_cmd_stamped
# To obst avoidance
roslaunch ars_launchers robot_remote_controller.launch robot_cmd_stamped:=/robot_cmd_ctr_stamped



# Reactive obstacle avoidance
# DJI M100
roslaunch ars_launchers robot_obstacle_avoidance_react.launch config_param_obstacle_avoidance_react_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/obstacle_avoidance_react/config_obstacle_avoidance_react_dji_m100.yaml"
# DJI Tello
roslaunch ars_launchers robot_obstacle_avoidance_react.launch config_param_obstacle_avoidance_react_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/obstacle_avoidance_react/config_obstacle_avoidance_react_dji_tello.yaml"



# Reactive obstacle avoidance 3D - NO!!!
# DJI M100
roslaunch ars_launchers robot_obstacle_avoidance_react_3d.launch config_param_obstacle_avoidance_react_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/obstacle_avoidance_react_3d/config_obstacle_avoidance_react_dji_m100.yaml"
# DJI Tello
roslaunch ars_launchers robot_obstacle_avoidance_react_3d.launch config_param_obstacle_avoidance_react_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/obstacle_avoidance_react_3d/config_obstacle_avoidance_react_dji_tello.yaml"


# Sensor fusion State estimator
roslaunch ars_launchers robot_msf_state_estimator.launch



# Sensor fusion SLAM
roslaunch ars_launchers robot_msf_slam.launch



# Motion controller PID - NEW
# DJI M100 Without state estimator and connected to aerial vehicle
roslaunch ars_launchers robot_motion_controller_pid.launch flag_connect_to_aerial_vehicle:=True flag_use_state_estim:=False config_param_motion_controller_pid_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/motion_controller_pid/config_motion_controller_pid_dji_m100.yaml"
# DJI M100 With state estimator and reactive obstacle avoidance
roslaunch ars_launchers robot_motion_controller_pid.launch flag_connect_to_aerial_vehicle:=False flag_use_state_estim:=True config_param_motion_controller_pid_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/motion_controller_pid/config_motion_controller_pid_dji_m100.yaml"
# DJI Tello Without state estimator and connected to aerial vehicle
roslaunch ars_launchers robot_motion_controller_pid.launch flag_connect_to_aerial_vehicle:=True flag_use_state_estim:=False config_param_motion_controller_pid_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/motion_controller_pid/config_motion_controller_pid_dji_tello.yaml"
# DJI Tello With state estimator and reactive obstacle avoidance
roslaunch ars_launchers robot_motion_controller_pid.launch flag_connect_to_aerial_vehicle:=False flag_use_state_estim:=True config_param_motion_controller_pid_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/motion_controller_pid/config_motion_controller_pid_dji_tello.yaml"



# Path follower
# Without state estimator
roslaunch ars_launchers robot_path_follower.launch
# With state estimator
roslaunch ars_launchers robot_path_follower.launch flag_use_state_estim:=True



# Path planner
# Simulated environment
# Without state estimator
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=False flag_use_slam_map:=False config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_sim_env.yaml"
# With state estimator and mapper
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=True flag_use_slam_map:=False config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_sim_env.yaml"
# With state estimator and slam map
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=True flag_use_slam_map:=True config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_sim_env.yaml"
# AeRoLab environment
# Without state estimator
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=False flag_use_slam_map:=False config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_aerolab.yaml"
# With state estimator and mapper
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=True flag_use_slam_map:=False config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_aerolab.yaml"
# With state estimator and slam map
roslaunch ars_launchers robot_path_planner.launch flag_use_state_estim:=True flag_use_slam_map:=True config_param_path_planner_core_yaml_file:="$(rospack find ars_config_robot_intelligence)/config/path_planner/config_path_planner_core_aerolab.yaml"






## INPUTS

# Path publisher
#
bash $ARS_PROJECT/scripts/publish_path_empty.sh
#
bash $ARS_PROJECT/scripts/publish_path_01.sh
#
bash $ARS_PROJECT/scripts/publish_path_02.sh
#
bash $ARS_PROJECT/scripts/publish_path_03.sh
#
bash $ARS_PROJECT/scripts/publish_path_07.sh


# Remove obstacles dynamic
rostopic pub -1 /simulator/sim_environment/flag_dynamic_obstacles std_msgs/Bool "data: false"
# Add obstacles dynamic
rostopic pub -1 /simulator/sim_environment/flag_dynamic_obstacles std_msgs/Bool "data: true"



